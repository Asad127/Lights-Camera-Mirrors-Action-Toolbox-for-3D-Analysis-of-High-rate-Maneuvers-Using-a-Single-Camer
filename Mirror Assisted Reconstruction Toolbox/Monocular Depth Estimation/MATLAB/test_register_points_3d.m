set(groot, 'defaultAxesFontName', 'Times New Roman');
set(groot, 'defaultAxesFontSize', 12);
set(groot, 'defaultfigurecolor', [1 1 1]);

% Configuration
DO_SCALE = true;
DO_TRANSLATION = true;
ENFORCE_VALID_ROTATION = false;
STANDARDIZE_POINTS = true;
SCALE_METHOD = 'trace';
ALGORITHM = 'procrustes';

% Nx3 point array.
points_query = [...
    0.3745, 0.0206, 0.6119; ...
    0.9507, 0.9699, 0.1395; ...
    0.7320, 0.8324, 0.2921; ...
    0.5987, 0.2123, 0.3664; ...
    0.1560, 0.1818, 0.4561; ...
    0.1560, 0.1834, 0.7852; ...
    0.0581, 0.3042, 0.1997; ...
    0.8662, 0.5248, 0.5142; ...
    0.6011, 0.4319, 0.5924; ...
    0.7081, 0.2912, 0.0465 ...
]';

% Nx3 point array.
% points_target = [...
%     1.0614, 1.1852, 4.3310; ...
%     2.8919, 0.0975, 3.3190; ...
%     2.6486, 0.4920, 3.6441; ...
%     1.5486, 0.8581, 3.8376; ...
%     1.4406, 1.6648, 3.9315; ...
%     1.4082, 1.7212, 4.6226; ...
%     1.6005, 1.8573, 3.3308; ...
%     2.0066, 0.2697, 3.9805; ...
%     1.8838, 0.8055, 4.0514; ...
%     1.5712, 0.5678, 3.0528 ...
% ]';

% Randomly generate 3D sample points.
rng(42);
% points_query = rand(3, 10);

% Define the transformation.
rotation_matrix = [0, 1, 0; 1, 0, 0; 0, 0, 1];
scale_factor = 2.0;
translation = [1; 2; 3];

% Apply the transformation.
points_target = scale_factor * rotation_matrix * points_query + translation;

% Add some Gaussian noise to the points.
% points_target = points_target + normrnd(0, 0.05, [3, size(points_query, 2)]);

% Perform the registration.
if strcmp(ALGORITHM, 'procrustes')
    registration_params = register_points_3d_procrustes( ...
        points_query, ...
        points_target, ...
        DO_SCALE, ...
        DO_TRANSLATION, ...
        STANDARDIZE_POINTS, ...
        ENFORCE_VALID_ROTATION, ...
        SCALE_METHOD ...
    );
elseif strcmp(ALGORITHM, 'horn')
    registration_params = register_points_3d_horn( ...
        points_query, ...
        points_target, ...
        DO_SCALE, ...
        DO_TRANSLATION, ...
        ENFORCE_VALID_ROTATION ...
    );
end

registered_query_points = registration_params.registered_query_points;

% Print results.
fprintf('Rotation matrix:\n');
disp(registration_params.transform.rotation_matrix);
fprintf('Translation vector:\n');
disp(registration_params.transform.translation_vector);
fprintf('Scaling factor: %f\n', registration_params.transform.scale_factor);
fprintf('Error Metrics:\n');
metrics = registration_params.metrics.get_metrics_as_dict();
fields = fieldnames(metrics);
for i = 1:length(fields)
    fprintf('  - %s: %f\n', fields{i}, metrics.(fields{i}));
end

% Create a single 3D scatter plot.
figure('Position', [100, 100, 800, 600]);

% Plot query points (blue filled circles).
scatter3(...
    points_query(1, :), ...
    points_query(2, :), ...
    points_query(3, :), ...
    50, 'b', 'o', 'filled', ...
    'DisplayName', 'Query Points' ...
);
hold on;

% Plot target points (red filled circles).
scatter3(...
    points_target(1, :), ...
    points_target(2, :), ...
    points_target(3, :), ...
    50, 'r', 'o', 'filled', ...
    'DisplayName', 'Target Points' ...
);

% Plot registered points query -> target (green hollow circles).
scatter3(...
    registered_query_points(1, :), ...
    registered_query_points(2, :), ...
    registered_query_points(3, :), ...
    50, 'g', 'o', ...
    'DisplayName', 'Registered Points', ...
    'MarkerFaceColor', 'none' ...
);

% Connect query points to registered points with dashed lines.
% Also connect the query points with the target points with magenta dashed lines.
for i = 1:size(points_query, 2)
    plot3(...
        [points_query(1, i), registered_query_points(1, i)], ...
        [points_query(2, i), registered_query_points(2, i)], ...
        [points_query(3, i), registered_query_points(3, i)], ...
        'LineWidth', 1, ...
        'LineStyle', '--', ...
        'Color', [0, 0, 0, 0.3], ...
        'HandleVisibility', 'off' ...
    );
    plot3(...
        [points_query(1, i), points_target(1, i)], ...
        [points_query(2, i), points_target(2, i)], ...
        [points_query(3, i), points_target(3, i)], ...
        'LineWidth', 1, ...
        'LineStyle', '--', ...
        'Color', [1, 0, 1, 0.3], ...
        'HandleVisibility', 'off' ...
    );
end

title('3D Point Registration: Original Coordinate Space');
xlabel('X');
ylabel('Y');
zlabel('Z');
grid on;
legend;
axis equal;

print('-dpng', '3d_alignment.png');

% In another figure, draw them standardized.
figure('Position', [100, 100, 800, 600]);

centroid_query = mean(points_query, 2);
centroid_target = mean(points_target, 2);
centroid_registered_query_points = mean(registered_query_points, 2);

centered_points_query = points_query - centroid_query;
centered_points_target = points_target - centroid_target;
centered_registered_points = registered_query_points - centroid_registered_query_points;

points_query_standardized = centered_points_query / sqrt(sum(centered_points_query(:).^2));
points_target_standardized = centered_points_target / sqrt(sum(centered_points_target(:).^2));
registered_points_standardized = centered_registered_points / sqrt(sum(centered_registered_points(:).^2));

% Plot query points (blue filled circles).
scatter3(...
    points_query_standardized(1, :), ...
    points_query_standardized(2, :), ...
    points_query_standardized(3, :), ...
    50, 'b', 'o', 'filled', ...
    'DisplayName', 'Query Points' ...
);
hold on;

% Plot target points (red filled circles).
scatter3(...
    points_target_standardized(1, :), ...
    points_target_standardized(2, :), ...
    points_target_standardized(3, :), ...
    50, 'r', 'o', 'filled', ...
    'DisplayName', 'Target Points' ...
);

% Plot registered points query -> target (green hollow circles).
scatter3(...
    registered_points_standardized(1, :), ...
    registered_points_standardized(2, :), ...
    registered_points_standardized(3, :), ...
    50, 'g', 'o', ...
    'DisplayName', 'Registered Points', ...
    'MarkerFaceColor', 'none' ...
);

% Connect query points to registered points with dashed lines.
% Also connect the query points with the target points with magenta dashed lines.
for i = 1:size(points_query, 2)
    plot3(...
        [points_query_standardized(1, i), registered_points_standardized(1, i)], ...
        [points_query_standardized(2, i), registered_points_standardized(2, i)], ...
        [points_query_standardized(3, i), registered_points_standardized(3, i)], ...
        'LineWidth', 1, ...
        'LineStyle', '--', ...
        'Color', [0, 0, 0, 0.3], ...
        'HandleVisibility', 'off' ...
    );
    plot3(...
        [points_query_standardized(1, i), points_target_standardized(1, i)], ...
        [points_query_standardized(2, i), points_target_standardized(2, i)], ...
        [points_query_standardized(3, i), points_target_standardized(3, i)], ...
        'LineWidth', 1, ...
        'LineStyle', '--', ...
        'Color', [1, 0, 1, 0.3], ...
        'HandleVisibility', 'off' ...
    );
end

title('3D Point Registration: Standardized Coordinate Space');
xlabel('X');
ylabel('Y');
zlabel('Z');
grid on;
legend;
axis equal;

print('-dpng', '3d_alignment_standardized.png');

% Display the plots
figure(1); % Bring first figure to front
figure(2); % Bring second figure to front
